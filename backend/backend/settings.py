"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from datetime import timedelta
import yaml

# Sentry
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

with open("config.yml", "r") as ymlfile:
    cfg = yaml.safe_load(ymlfile)

if cfg["env"] == "prod":
    sentry_sdk.init(
        dsn=cfg["sentry"]["dsn"],
        integrations=[DjangoIntegration()],

        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True
    )

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = cfg["security"]["django_secret_key"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if cfg["env"] == "dev" else False

ALLOWED_HOSTS = ['*'] if DEBUG else cfg["security"]["allowed_hosts"].split(" ")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'oauth',
    "common",
    "pages",
    "docs",
    "mentors",
    "mail",
    "rest_framework",
    "corsheaders",
    "import_export",
    "tinymce",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    # PDFs won't load in an iframe if this header is enabled
    # "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.common.CommonMiddleware",
]

MIDDLEWARE_CLASSES = (
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
)

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
if DEBUG:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "NAME": cfg["database"]["name"],
            "USER": cfg["database"]["user"],
            "PASSWORD": cfg["database"]["password"],
            "HOST": cfg["database"]["host"],
            "PORT": cfg["database"]["port"]
        }
    }


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator", },
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator", },
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator", },
]

# Rest Framework Simple JWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(cfg["simple_jwt"]["exp_access"]),),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=int(cfg["simple_jwt"]["exp_refresh"]),),

    'SIGNING_KEY': cfg["simple_jwt"]["secret_signing_key"],
}

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Kolkata"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = "/static/"
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = False

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

# EMAIL_DATA
DEFAULT_FROM_EMAIL = cfg["sendgrid"]["from_email"]
EMAIL_HOST_PASSWORD = cfg["sendgrid"]["sendgrid_api_key"]
SEND_EMAIL_TO = cfg["sendgrid"]["send_to_email"]

RECEIVER_NAME = cfg["sendgrid"]["receiver_name"]

# ReCAPTCHA
RECAPTCHA_SECRET_KEY = cfg["recaptcha"]["recaptcha_secret_key"]

# OAuth
GOOGLE_OAUTH_CLIENT_ID = cfg["oauth"]["google_client_id"]
